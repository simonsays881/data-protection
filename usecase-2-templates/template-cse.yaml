AWSTemplateFormatVersion: "2010-09-09"

Description: This AWS CloudFormation Template creates the necessary resources for the client side encryption usecase 

# This IAM user will be used for all login and development
Resources:

  # Create a cloudwatch event rule that will trigger the cryptobuider-cse-lambda lambda
# function when GenerateDataKey calls are made

   cryptocweeventcse:
      Type : AWS::Events::Rule
      Properties: 
         Description: "Cloudwatch event rule for client side encryption usecases"
         EventPattern: 
            source: 
               - "aws.kms"
            detail-type: 
               - "AWS API Call via CloudTrail"
            detail: 
               eventSource: 
                  - "kms.amazonaws.com"
               eventName: 
                  - "GenerateDataKey"
         Name: 'crypto-builder-cse-cw-rule-usecase-3'
         State: "ENABLED"
         Targets:
            - 
               Arn: !GetAtt cryptocselambda.Arn
               Id: "cw-rule-cse"
               
   # Create a cloud9 environment 

# Create the lambda function used for client side encryption usecase
# This is mainly for studying GenerateDataKey calls that happen during client
# side encryption with data key caching and without data key caching

   cryptocselambda:
      Type : AWS::Lambda::Function
      Properties: 
         FunctionName: 'cryptobuilder-cse-lambda-usecase-3'
         Handler: "index.lambda_handler"
         Role: !GetAtt cryptocwelambdarole.Arn
         Runtime: 'python2.7'
         Code: 
            ZipFile: |
               from __future__ import print_function
               import os
               import boto3
               import random
               
               
               # Main event function for pushing CW events containing GenerateDataKey calls 
               def lambda_handler(event, context):
                   ###############################################################################################
                   #                                                                                             #
                   #   Lambda function get a cloudwatch event for the GenerateDatakeyCall                        #
                   #   for the KMS service                                                                       #                                                                     #
                   #                                                                                             #
                   #   Checks if the encryption context matches the client side encryption context provided for  #
                   #   cse usecases                                                                              #
                   #                                                                                             #
                   #   Creates a bucket with a tag containing the encryption context so that the usecase code    #
                   #   can identify whether GenerateDataKey call was for CSE usecase-2 or usecase-3              #
                   ###############################################################################################
                   
                   print (event['detail'])
                   region = os.environ['AWS_REGION']
                   print(region)
                   s3_client = boto3.client('s3', region)
                   
                   whatfor_value = event['detail']['requestParameters']['encryptionContext']['whatfor']
                   
                   if whatfor_value == 'usecase-3-cse':
                      bucket_name = 'reinvent-builder-bucket-cw-event' + str(random.randint(1, 100000))
                      # Doing the below because locationconstraint does not support all regions today
                      if 'us-east-1' in region:
                           s3_client.create_bucket(Bucket=bucket_name)
                      else:
                           s3_client.create_bucket(
                              Bucket=bucket_name,
                              CreateBucketConfiguration={
                                   'LocationConstraint': region
                              }
                           )
               
                      response = s3_client.put_bucket_tagging(
                          Bucket=bucket_name,
                          Tagging={
                              'TagSet': [
                                  {
                                      'Key': 'whatfor',
                                      'Value': whatfor_value
                                  },
                              ]
                          }
                      )
                      print("Exiting")
               
                   return

   # We will use admin privileges for now and make it least privilege as we learn
   cryptocwelambdarole:
      Type : AWS::IAM::Role
      Properties:
         RoleName: 'cryptobuildercwelambdaroleusecase3'
         AssumeRolePolicyDocument: 
           Version: "2012-10-17"
           Statement: 
             - 
               Effect: "Allow"
               Principal: 
                 Service: 
                   - "lambda.amazonaws.com"
               Action: 
                 - "sts:AssumeRole"
         
      
   # We will use admin privileges for now and make it least privilege as we learn
   cryptocwelambdapolicy:
      Type : AWS::IAM::Policy
      Properties: 
         PolicyName : 'cryptobuilder-cse-cwe-lambda-policy-usecase-3'
         PolicyDocument : 
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: "*"
               Resource: "*"
         Roles:
            - !Ref cryptocwelambdarole
            
   LambdaInvokePermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !GetAtt cryptocselambda.Arn
       Action: 'lambda:InvokeFunction'
       Principal: 'events.amazonaws.com'
       SourceArn: !GetAtt cryptocweeventcse.Arn